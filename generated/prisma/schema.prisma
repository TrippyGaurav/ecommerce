generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Resources {
  USERS
  PRODUCTS
  ORDERS
  ROLES
  CATEGORIES
}

enum Actions {
  CREATE
  READ
  UPDATE
  DELETE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions RolePermission[]
  user        User[]

  @@map("roles")
}

model RolePermission {
  id          String    @id @default(cuid())
  resource    Resources
  permissions Actions[] @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String?

  @@unique([roleId, resource])
  @@map("role_permissions")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role      Role           @relation(fields: [roleId], references: [id])
  roleId    String
  overrides UserOverride[]
  orders    Order[]

  @@map("users")
}

model UserOverride {
  id                 String    @id @default(cuid())
  resource           Resources
  deniedPermissions  Actions[] @default([])
  allowedPermissions Actions[] @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userId, resource])
  @@map("user_overrides")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique // URL-friendly version
  parentId    String? // For nested categories
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  productCategories ProductCategory[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  sku         String?  @unique // Stock Keeping Unit
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems        OrderItem[]
  productCategories ProductCategory[]

  @@map("products")
}

// Junction table for many-to-many relationship between products and categories
model ProductCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @default(cuid()) // Human-readable order number
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @default(0) @db.Decimal(10, 2)
  shipping    Decimal     @default(0) @db.Decimal(10, 2)
  total       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2) // Price at time of order
  totalPrice Decimal  @db.Decimal(10, 2) // quantity * unitPrice
  createdAt  DateTime @default(now())

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
  @@map("order_items")
}
